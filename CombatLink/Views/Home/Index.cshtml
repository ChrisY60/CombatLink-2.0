@model CombatLink.Application.ViewModels.IndexViewModel
@{
    ViewData["Title"] = "Home Page";
}
<script src="~/js/swiper.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
@if (Model?.Users == null || Model.Users.Count == 0)
{
    <p> No users with this criteria available :(</p>
    <p> Go to your profile to customize it in order to get opponents!</p>
}
else
{
    int counter = 0;
    
    <div id="swiper">
        @foreach (User user in Model.Users)
        {
            counter++;

            <div class="recommendation">
                <div class="profile-card" style="--i:@counter">
                    <div class="profile-image">
                        <img src="https://combatlinkblob.blob.core.windows.net/combatlink/nopfp.jpg" alt="Profile Picture">
                    </div>
                    <div class="profile-bio">
                        <h2>@user.FirstName @user.LastName</h2>
                        <p>@user.Weight Kg &nbsp;&nbsp; @user.Height Cm</p>
                        <div class="tags">
                            @foreach (var sport in user.Sports.Take(3))
                            {
                                <button class="tag">@sport.Name</button>
                            }
                            @if (user.Sports.Count > 3)
                            {
                                <button class="tag more">more</button>
                            }
                        </div>
                    </div>
                </div>

                <div class="additional-info">
                    <p><strong>Location:</strong> 5km away</p>
                    <p><strong>Trained for:</strong> @user.MonthsOfExperience months</p>
                    <p><strong>Languages:</strong> @string.Join(", ", user.Languages.Select(l => l.Name))</p>
                </div>
            </div>
        }
    </div>
}


<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log("Swiped");

        const recommendations = document.querySelectorAll(".recommendation");
        let currentIndex = recommendations.length - 1;

        function setupSwipe(recommendation) {
            const profileCard = recommendation.querySelector(".profile-card");
            const hammer = new Hammer(profileCard);

            hammer.on("pan", function (event) {
                recommendation.style.transform = `translateX(${event.deltaX}px) rotate(${event.deltaX / 10}deg)`;
            });

            hammer.on("panend", function (event) {
                if (event.deltaX > 200) {
                    recommendation.style.transform = "translateX(100vw) rotate(20deg)";
                    removeRecommendation(recommendation);
                } else if (event.deltaX < -200) {
                    recommendation.style.transform = "translateX(-100vw) rotate(-20deg)";
                    removeRecommendation(recommendation);
                } else {
                    recommendation.style.transform = "";
                }
            });
        }

        function removeRecommendation(recommendation) {
            setTimeout(() => {
                recommendation.remove();
                currentIndex--;
                if (currentIndex >= 0) {
                    setupSwipe(recommendations[currentIndex]);
                }
            }, 300);
        }

        if (recommendations.length > 0) {
            setupSwipe(recommendations[currentIndex]);
        }
    });

</script>

