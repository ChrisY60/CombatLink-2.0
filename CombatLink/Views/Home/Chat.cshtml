@model CombatLink.Application.ViewModels.ChatViewModel
@{
    DateTime? lastDate = null;
}

<!-- Scripts & Styles -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script type="module" src="~/js/ChatClient.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script>
    const matchId = @Model.MatchId;
    const currentUserId = @Model.CurrentUserId;
</script>

<div class="chat-container">
    <div class="chat-header">
        <button id="backButton">←</button>
        <div class="user-info">
            <img src="/images/fighter1.png" alt="Avatar" class="avatar" />
        </div>
    </div>

    <div id="chatBox" class="chat-box">
        @foreach (var item in Model.ChatItems)
        {
            var itemDate = item.Time.Date;

            if (lastDate != itemDate)
            {
                <div class="date-separator">@itemDate.ToString("dd.MM.yyyy")</div>
                lastDate = itemDate;
            }

            if (item.Message != null)
            {
                var isMine = item.Message.Sender?.Id == Model.CurrentUserId;
                <div class="chat-message @(isMine ? "sent" : "received")">
                    <div class="bubble">
                        @item.Message.MessageContent
                        <div class="message-meta">@item.Message.TimeSent.ToShortTimeString()</div>
                    </div>
                </div>
            }

            if (item.Proposal != null)
            {
                <div class="proposal-card hover-card">
                    <div class="map-preview" id="map-@item.Proposal.Id"
                         data-lat="@item.Proposal.Latitude"
                         data-lng="@item.Proposal.Longtitude">
                    </div>
                    <div class="p-3">
                        <div><strong>Date:</strong> @item.Proposal.TimeOfSession.ToString("dd.MM.yyyy")</div>
                        <div><strong>Time:</strong> @item.Proposal.TimeOfSession.ToString("HH:mm")</div>
                        <span class="badge bg-danger mt-2">
                            @(string.IsNullOrWhiteSpace(item.Proposal.RelatedSport?.Name) ? "Unknown" : item.Proposal.RelatedSport.Name)
                        </span>
                        <div class="text-muted small mt-2 text-center">Click to view more information</div>
                    </div>
                    <div class="hover-overlay">
                        <span>Click for more information</span>
                    </div>
                </div>
            }
        }
    </div>
</div>
    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type here..." />
        <button class="propose-button" data-bs-toggle="modal" data-bs-target="#proposeModal">
            <img src="https://combatlinkblob2.blob.core.windows.net/combatlink/propose_spar.webp" alt="Propose" class="propose-icon" />
        </button>
        <button class="chatButton" id="sendButton">➤</button>
    </div>


@await Html.PartialAsync("~/Views/Shared/_SparringProposalModal.cshtml", Model)

<!-- JS to Init Proposal Map Previews -->
<script>
    function initializeMapPreview(el) {
        const lat = parseFloat(el.dataset.lat);
        const lng = parseFloat(el.dataset.lng);
        const map = L.map(el, {
            zoomControl: false,
            attributionControl: false,
            dragging: false,
            scrollWheelZoom: false,
            doubleClickZoom: false,
            boxZoom: false,
            keyboard: false,
            tap: false,
            touchZoom: false
        }).setView([lat, lng], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
        }).addTo(map);

        L.marker([lat, lng]).addTo(map);
        setTimeout(() => map.invalidateSize(), 200);
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Ensure rendering happens after layout
        setTimeout(() => {
            document.querySelectorAll('.map-preview').forEach(initializeMapPreview);
        }, 300);
    });
</script>


<!-- Modal Map Setup -->
<script>
    let map, marker;

    $(document).ready(function () {
        $('#proposeModal').on('shown.bs.modal', function () {
            if (!map) {
                map = L.map('map').setView([52.3676, 4.9041], 13);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; OpenStreetMap'
                }).addTo(map);

                marker = L.marker([52.3676, 4.9041], { draggable: true }).addTo(map);

                marker.on('dragend', function (e) {
                    const pos = marker.getLatLng();
                    $('#latitude').val(pos.lat.toFixed(6));
                    $('#longitude').val(pos.lng.toFixed(6));
                });
            }

            setTimeout(() => map.invalidateSize(), 500);
        });
    });
</script>

<!-- Proposal Submit -->
<script>
    document.getElementById('proposeForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const payload = {
            challengerUserId: parseInt(document.getElementById('challengerUserId').value),
            challengedUserId: parseInt(document.getElementById('challengedUserId').value),
            sportId: parseInt(document.getElementById('sportId').value),
            timeOfSession: document.getElementById('sessionTime').value,
            latitude: parseFloat(document.getElementById('latitude').value),
            longitude: parseFloat(document.getElementById('longitude').value)
        };

        try {
            const response = await fetch('/Sparring/Propose', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                alert("Sparring proposal sent!");
                $('#proposeModal').modal('hide');
                document.getElementById('proposeForm').reset();
            } else {
                const error = await response.text();
                alert("Error: " + error);
            }
        } catch (err) {
            alert("Unexpected error: " + err);
        }
    });
</script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const chatBox = document.getElementById("chatBox");
            chatBox.scrollTop = chatBox.scrollHeight;
        });
    </script>
