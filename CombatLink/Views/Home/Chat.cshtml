@model CombatLink.Application.ViewModels.ChatViewModel
@{
    DateTime? lastDate = null;
}

<!-- Scripts & Styles -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script type="module" src="~/js/ChatClient.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

<script>
    const matchId = @Model.MatchId;
    const currentUserId = @Model.CurrentUserId;
</script>

<div class="chat-container">
    <div class="chat-header">
        <button id="backButton">←</button>
        <div class="user-info">
            <img src="@Model.OtherUserObj.ProfilePictureURL" alt="Avatar" class="avatar" />
        </div>
    </div>

    <div id="chatBox" class="chat-box">
        @foreach (var item in Model.ChatItems)
        {
            var itemDate = item.Time.Date;

            if (lastDate != itemDate)
            {
                <div class="date-separator">@itemDate.ToString("dd.MM.yyyy")</div>
                lastDate = itemDate;
            }

            if (item.Message != null)
            {
                var isMine = item.Message.Sender?.Id == Model.CurrentUserId;
                <div class="chat-message @(isMine ? "sent" : "received")">
                    <div class="bubble">
                        @item.Message.MessageContent
                        <div class="message-meta">@item.Message.TimeSent.ToShortTimeString()</div>
                    </div>
                </div>
            }

            @if (item.Proposal != null)
            {
                var proposal = item.Proposal;

                // Sent/received logic based on who created the proposal
                Console.WriteLine(Model.CurrentUserId);
                var isMine = proposal.ChallengerUserId == Model.CurrentUserId;
                var alignClass = isMine ? "sent" : "received";

                var statusClass = proposal.Status switch
                {
                    ProposalStatus.Accepted => "accepted",
                    ProposalStatus.Declined => "declined",
                    _ => "pending"
                };

                var statusLabel = proposal.Status switch
                {
                    ProposalStatus.Accepted => "SPARRING ACCEPTED",
                    ProposalStatus.Declined => "SPARRING DECLINED",
                    _ => null
                };

                <div class="proposal-wrapper @alignClass">
                    <div class="proposal-card @statusClass hover-card" onclick="showProposalDetails(@proposal.Id)">
                        @if (statusLabel != null)
                        {
                            <div class="overlay-status">@statusLabel</div>
                        }

                        <div class="map-preview" id="map-@proposal.Id"
                             data-lat="@proposal.Latitude"
                             data-lng="@proposal.Longtitude">
                        </div>

                        <div class="p-3">
                            <div><strong>Date:</strong> @proposal.TimeOfSession.ToString("dd.MM.yyyy")</div>
                            <div><strong>Time:</strong> @proposal.TimeOfSession.ToString("HH:mm")</div>
                            <span class="badge bg-danger mt-2">
                                @(string.IsNullOrWhiteSpace(proposal.RelatedSport?.Name) ? "Unknown" : proposal.RelatedSport.Name)
                            </span>
                            <div class="text-muted small mt-2 text-center">Click to view more information</div>
                        </div>

                        <div class="hover-overlay">
                            <span>Click for more information</span>
                        </div>

                        @await Html.PartialAsync("_SparringProposalDetails", proposal, new ViewDataDictionary(ViewData)
                        {
                        { "CurrentUserId", Model.CurrentUserId }
                        })

                    </div>
                </div>
            }

        }
    </div>
</div>


<div class="chat-input">
    <input type="text" id="messageInput" placeholder="Type here..." />
    <button class="propose-button" data-bs-toggle="modal" data-bs-target="#proposeModal">
        <img src="https://combatlinkblob2.blob.core.windows.net/combatlink/propose_spar.webp" alt="Propose" class="propose-icon" />
    </button>
    <button class="chatButton" id="sendButton">➔</button>
</div>

@await Html.PartialAsync("~/Views/Shared/_SparringProposalModal.cshtml", Model)


<script>
    function initializeMapPreview(el) {
        const lat = parseFloat(el.dataset.lat);
        const lng = parseFloat(el.dataset.lng);
        const map = L.map(el, {
            zoomControl: false,
            attributionControl: false,
            dragging: false,
            scrollWheelZoom: false,
            doubleClickZoom: false,
            boxZoom: false,
            keyboard: false,
            tap: false,
            touchZoom: false
        }).setView([lat, lng], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
        }).addTo(map);

        L.marker([lat, lng]).addTo(map);
        setTimeout(() => map.invalidateSize(), 200);
    }

    document.addEventListener("DOMContentLoaded", function () {
        setTimeout(() => {
            document.querySelectorAll('.map-preview').forEach(initializeMapPreview);
        }, 300);
    });
</script>

<script>
    let map, marker;
    $(document).ready(function () {
        $('#proposeModal').on('shown.bs.modal', function () {
            if (!map) {
                map = L.map('proposalMap').setView([52.3676, 4.9041], 13);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; OpenStreetMap'
                }).addTo(map);

                marker = L.marker([52.3676, 4.9041], { draggable: true }).addTo(map);
                marker.on('dragend', function (e) {
                    const pos = marker.getLatLng();
                    $('#latitude').val(pos.lat.toFixed(6));
                    $('#longitude').val(pos.lng.toFixed(6));
                });
            }
            setTimeout(() => map.invalidateSize(), 500);
        });
    });
</script>

<script>
    let map, marker;
    $(document).ready(function () {
        $('#proposeModal').on('shown.bs.modal', function () {
            if (!map) {
                map = L.map('proposalMap').setView([52.3676, 4.9041], 13);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);

                L.Control.geocoder({
                    defaultMarkGeocode: false
                })
                    .on('markgeocode', function (e) {
                        const center = e.geocode.center;
                        map.setView(center, 15);

                        marker.setLatLng(center);
                        $('#latitude').val(center.lat.toFixed(6));
                        $('#longitude').val(center.lng.toFixed(6));
                    })
                    .addTo(map);

                marker = L.marker([52.3676, 4.9041], { draggable: true }).addTo(map);
                marker.on('dragend', function () {
                    const pos = marker.getLatLng();
                    $('#latitude').val(pos.lat.toFixed(6));
                    $('#longitude').val(pos.lng.toFixed(6));
                });
            }

            setTimeout(() => map.invalidateSize(), 500);
        });
    });
</script>

<script>
    async function showProposalDetails(proposalId) {
        try {
            const response = await fetch(`/Sparring/Details/${proposalId}`);
            const html = await response.text();
            const container = document.createElement("div");
            container.innerHTML = html;
            document.body.appendChild(container);

            const modalElement = container.querySelector(".modal");
            const modal = new bootstrap.Modal(modalElement);

            modal.show();

            modalElement.addEventListener('shown.bs.modal', function () {
                const lat = parseFloat(modalElement.querySelector('[data-lat]').dataset.lat);
                const lng = parseFloat(modalElement.querySelector('[data-lng]').dataset.lng);

                const mapEl = modalElement.querySelector('#map');
                const map = L.map(mapEl).setView([lat, lng], 13);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 18,
                }).addTo(map);
                L.marker([lat, lng]).addTo(map);

                setTimeout(() => map.invalidateSize(), 300);
            });
        } catch (err) {
            console.error("Failed to load proposal details:", err);
        }
    }
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const chatBox = document.getElementById("chatBox");
        chatBox.scrollTop = chatBox.scrollHeight;
    });
</script>

<script>
    document.getElementById('proposeForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const payload = {
            challengerUserId: parseInt(document.getElementById('challengerUserId').value),
            challengedUserId: parseInt(document.getElementById('challengedUserId').value),
            sportId: parseInt(document.getElementById('sportId').value),
            timeOfSession: document.getElementById('sessionTime').value,
            latitude: parseFloat(document.getElementById('latitude').value),
            longitude: parseFloat(document.getElementById('longitude').value)
        };

        try {
            const response = await fetch('/Sparring/Propose', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                $('#proposeModal').modal('hide');
                document.getElementById('proposeForm').reset();
                location.reload();
            } else {
                const error = await response.text();
                alert("Error: " + error);
            }
        } catch (err) {
            alert("Unexpected error: " + err);
        }
    });

</script>
<script>
    document.addEventListener("click", async function (e) {
        if (e.target.matches("#acceptProposalBtn, #declineProposalBtn")) {
            const button = e.target;
            const action = button.getAttribute("data-action");
            const proposalId = button.getAttribute("data-proposal-id");

            try {
                const response = await fetch(`/Sparring/${action}/${proposalId}`, {
                    method: "POST"
                });

                if (response.ok) {
                    console.log(`Proposal ${action.toLowerCase()}ed successfully.`);

                    const modalEl = document.getElementById("proposalPreviewModal");
                    const modal = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
                    modal.hide();

                    location.reload();
                } else {
                    alert("Error: " + await response.text());
                }
            } catch (err) {
                alert("Unexpected error: " + err);
            }
        }
    });

</script>
